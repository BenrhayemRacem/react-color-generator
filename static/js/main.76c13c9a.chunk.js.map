{"version":3,"sources":["ColorInput.js","SingleColor.js","ColorList.js","App.js","index.js"],"names":["ColorInput","props","colorValue","value","changeColor","onColorChange","error","inputClassName","Container","Row","className","Alert","variant","Heading","onSubmit","e","preventDefault","Col","xs","type","placeholder","onChange","target","Button","size","SingleColor","useState","isShown","setIsShown","leave","setLeave","color","colorHexString","hexString","textColor","oppositeColor","map","element","join","alertCopy","useEffect","timeout","setTimeout","clearTimeout","md","style","backgroundColor","onClick","navigator","clipboard","writeText","onMouseEnter","onMouseLeave","rgbString","weight","ColorList","colorList","setAlertCopy","colorIndex","rgb","App","setColor","Values","all","setColorList","setError","colorfrominput","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76c13c9a.chunk.js","sourcesContent":["import {Alert, Button, Col, Container, Row} from \"react-bootstrap\";\r\n\r\n\r\n\r\n\r\n\r\nconst ColorInput = (props)=> {\r\n    const colorValue = props.value;\r\n    const changeColor = props.changeColor;\r\n    const onColorChange = props.onColorChange;\r\n    const error = props.error;\r\n     const inputClassName= error ? \"wrongInput\" : \"validInput\" ;\r\n\r\n    const handleSubmit =(e) => {\r\n        e.preventDefault();\r\n        changeColor(colorValue);\r\n    }\r\n\r\nreturn (\r\n    <Container  >\r\n        {error && (\r\n            <Row className=\"justify-content-center\">\r\n            <Alert variant=\"danger\">\r\n                <Alert.Heading>Hey, wrong Color</Alert.Heading>\r\n                </Alert>\r\n        </Row>\r\n            )}\r\n\r\n        <form  onSubmit={handleSubmit}>\r\n\r\n            <Row  className=\"justify-content-center\">\r\n\r\n                <Col xs={5}>\r\n                        <label>Enter Color &nbsp; </label>\r\n                    <input type=\"text\"\r\n                           placeholder=\"e.g: 04009A\"\r\n                           value={colorValue}\r\n                           onChange={(e)=>onColorChange(e.target.value)}\r\n                    className={inputClassName}/>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row   className=\"justify-content-center\">\r\n                <Col xs={5} className=\"justify-content-center\">\r\n                    <Button type=\"submit\" size=\"lg\"    >\r\n                        submit\r\n                    </Button>\r\n                </Col>\r\n\r\n            </Row>\r\n        </form>\r\n\r\n\r\n    </Container>\r\n)\r\n};\r\n\r\n\r\nexport default ColorInput;","import {Col} from \"react-bootstrap\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\n\r\nconst SingleColor =(props) => {\r\n    const [isShown , setIsShown] = useState(false);\r\n    const [leave, setLeave] = useState(false);\r\n    const color = props.color ;\r\n   const colorHexString = color.hexString();\r\n   const oppositeColorRgb = props.oppositeColor.map((element)=> 255-element);\r\n    const textColor = \"rgb(\" + oppositeColorRgb.join(\",\") + \")\" ;\r\n    const alertCopy = props.alertCopy;\r\n\r\n    useEffect( ()=>{\r\n        if(leave) {\r\n        let timeout = setTimeout ( ()=> setIsShown(false),500);\r\n        return ()=> clearTimeout(timeout)\r\n        }\r\n    } , [isShown ])\r\n    return (\r\n        <Col xs={6}\r\n             md={3}\r\n             style={{backgroundColor:colorHexString , color:textColor}}\r\n             onClick={()=> {\r\n                 alertCopy();\r\n                 navigator.clipboard.writeText(colorHexString) ;\r\n\r\n             }}\r\n              onMouseEnter={()=> {\r\n                  setIsShown(true);}}\r\n            onMouseLeave={()=>{\r\n                setIsShown(false);\r\n            setLeave(true)}}\r\n             className=\"singleColor\"\r\n            >\r\n            <h3> {colorHexString}</h3>\r\n            {isShown && (<>\r\n\r\n                <h5>{color.rgbString()}</h5>\r\n                <h5>weight : {color.weight} % </h5>\r\n            </>)}\r\n\r\n\r\n\r\n\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default SingleColor ;","import {Alert, Container, Row} from \"react-bootstrap\";\r\nimport SingleColor from \"./SingleColor\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst ColorList = (props)=> {\r\nconst colorList = props.colorList;\r\nconst  error = props.error;\r\n const [alertCopy , setAlertCopy] = useState(false);\r\n    useEffect( ()=>{\r\n\r\n            let timeout = setTimeout ( ()=> setAlertCopy(false),3000);\r\n\r\n            return ()=> clearTimeout(timeout)\r\n\r\n    } , [ alertCopy])\r\n    return (\r\n        <Container>\r\n            {!error && (\r\n                <>\r\n                    {alertCopy && (\r\n                        <Row className=\"justify-content-center\">\r\n                        <Alert variant=\"success\">\r\n                        <Alert.Heading>color copied successfully</Alert.Heading>\r\n                    </Alert>\r\n                        </Row>)}\r\n                    {!alertCopy && (<Row className=\" justify-content-center\">\r\n\r\n                        <Alert variant=\"warning\">\r\n                            <Alert.Heading>Click on color to copy it to clipboard</Alert.Heading>\r\n                        </Alert>\r\n\r\n                    </Row>)}\r\n\r\n                <Row>\r\n                {colorList.map((color , colorIndex)=> {\r\n                    return <SingleColor\r\n                        key={colorIndex}\r\n                        color={color}\r\n                        oppositeColor={colorList[colorIndex].rgb}\r\n                    alertCopy={ ()=>setAlertCopy(true)}/>\r\n                })}\r\n            </Row>\r\n\r\n                </>\r\n\r\n            )}\r\n\r\n        </Container>\r\n        )\r\n\r\n\r\n\r\n\r\n};\r\n\r\nexport default ColorList;","\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Values from \"values.js\";\nimport {useState} from \"react\";\nimport ColorInput from \"./ColorInput\";\nimport ColorList from \"./ColorList\"\n\n\nfunction App() {\n  const [color,setColor] = useState('');\n  const [colorList , setColorList] = useState(new Values(\"#04009A\").all()) ;\n  const [error , setError] = useState(false);\n    const changeColor = (colorfrominput) => {\n        try {\n            setError(false);\n            setColorList(new Values(`#${color}`).all()) ;\n\n\n        }\n        catch (error) {\n            setColor('');\n            setColorList([]) ;\n            setError(true);\n\n\n        }\n    }\n\n  return (\n          <>\n            <ColorInput\n                value={color}\n                changeColor={changeColor}\n                onColorChange={setColor}\n                error = {error} />\n            <ColorList colorList={colorList} error={error}/>\n          </>\n\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport \"./index.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}